# pylint: disable=import-error
from VM_OrchestratorApp.src.objects.observation import Observation
from VM_Orchestrator.settings import REDMINE_IDS
from VM_Orchestrator.settings import settings
from datetime import datetime
import re

regex = '\[(.*)]'

def resolve_name(vulnerability_dict, language):
    if language == 'eng':
        return vulnerability_dict['english_name']
    elif language == 'spa':
        return vulnerability_dict['spanish_name']


class Vulnerability:

    # Description is the string that will be sent to slack/redmine/report
    def __init__(self, vulnerability_dict, info, custom_description):
        if re.search(regex,vulnerability_dict['english_name']):
            self.vulnerability_name = vulnerability_dict['english_name']
            self.observation = None
            self.status = vulnerability_dict['status']
            self.vuln_type = vulnerability_dict['scan_type']
        else:
            self.vulnerability_name = resolve_name(vulnerability_dict, info['language'])
            self.observation = Observation(self.vulnerability_name, info['language'])
            self.status = vulnerability_dict['status']    
            self.vuln_type = vulnerability_dict['scan_type']
        
        self.module_identifier = vulnerability_dict['module_identifier']
        self.language = info['language']
        self.domain = info['domain']
        self.target = info['target']
        self.time = datetime.now()
        self.custom_description = custom_description
        self.image_string = None
        self.file_string = None
        self.cvss = 0
        self.attachments = list()

        return

    def resolve_priority(self):
        severity_dict_eng = {'INFORMATIONAL': REDMINE_IDS['SEVERITY_INFORMATIONAL'],
         'LOW': REDMINE_IDS['SEVERITY_LOW'], 'MEDIUM': REDMINE_IDS['SEVERITY_MEDIUM'],
          'HIGH': REDMINE_IDS['SEVERITY_HIGH'], 'CRITICAL': REDMINE_IDS['SEVERITY_CRITICAL']}
        severity_dict_spa = {'INFORMATIONAL': REDMINE_IDS['SEVERITY_INFORMATIONAL'],
         'BAJO': REDMINE_IDS['SEVERITY_LOW'], 'MEDIO': REDMINE_IDS['SEVERITY_MEDIUM'],
          'ALTO': REDMINE_IDS['SEVERITY_HIGH'], 'CRITICO': REDMINE_IDS['SEVERITY_CRITICAL']}
        if settings['LANGUAGE'] == 'eng':
            try:
                return severity_dict_eng[self.observation.severity]
            except (KeyError,AttributeError):
                return REDMINE_IDS['SEVERITY_MEDIUM']
        elif settings['LANGUAGE'] == 'spa':
            try:
                return severity_dict_spa[self.observation.severity]
            except (KeyError,AttributeError):
                return REDMINE_IDS['SEVERITY_MEDIUM']

    def add_attachment(self, attachment_path, attachment_name):
        self.attachments.append({
            "path": attachment_path,
            "name": attachment_name
        })

    def add_image_string(self, image_string):
        self.image_string = image_string

    def add_file_string(self, file_string):
        self.file_string = file_string

    def get_json_observation(self):
        if re.search(regex, self.vulnerability_name):
            return None
        return_value = {
            'title': self.observation.title,
            'observation_title': self.observation.observation_title,
            'observation_note': self.observation.observation_note,
            'implication': self.observation.implication,
            'recommendation_title': self.observation.recommendation_title,
            'recommendation_note': self.observation.recommendation_urls,
            'severity': self.observation.severity
        }
        return return_value


